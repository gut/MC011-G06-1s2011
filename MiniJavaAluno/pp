#!/usr/bin/env python
# -*- coding: utf-8 -*-

#  Copyright (C) 2011 - Gustavo Serra Scalet <gsscalet@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

__AUTHOR__ = "Gustavo Serra Scalet <gsscalet@gmail.com>"
__VERSION__ = 0.1

MIN_ARGS = 1

def pp(folder, verbose = False):
	"""
	Executes the tests of FOLDER/in and saves its output on FOLDER/g06
	Also concatenates all the FOLDER/g06/* files on FOLDER/gall/g06.out
	"""
	import os
	import glob

	all_folder = os.path.join(folder, 'gall')
	if not os.path.isdir(all_folder):
		os.mkdir(all_folder)

	out_folder = os.path.join(folder, 'g06')
	if not os.path.isdir(out_folder):
		os.mkdir(out_folder)

	all_out = open(os.path.join(all_folder, 'g06.out'), 'w')
	for f in sorted(glob.glob(os.path.join(folder, 'in', '*'))):
		subp = os.popen('/usr/bin/java main/Main "%s"' % f)
		content = subp.read()

		out_file = os.path.join(out_folder, os.path.basename(f).replace('.java','') + '.out')
		out = open(out_file, 'w')

		out.write(content)
		out.close()

		all_out.write(content)

	all_out.close()

if __name__ == "__main__":
	from sys import argv, exit
	from os import sep
	from optparse import OptionParser

	options = {
		# 'one_letter_option' : ['full_option_name',
			# "Help",
			# default_value],
		'v' : ['verbose',
			"Shows more info about the process",
			False],
	}

	options_list = ' '.join(["[-%s --%s]" % (o, options[o][0]) for o in options])
	desc = pp.__doc__.replace('    ','')
	parser = OptionParser("%%prog FOLDER %s" % options_list,
			description=desc,
			version="%%prog %s" % __VERSION__)

	for o in options:
		shorter = '-' + o
		longer = '--' + options[o][0]
		if type(options[o][2]) is bool:
			parser.add_option(shorter, longer, dest=o, help=options[o][1],
				action="store_true", default=options[o][2])
		elif type(options[o][2]) is str:
			parser.add_option(shorter, longer, dest=o, help=options[o][1],
				action="store", type="string", default=options[o][2])

	(opt, args) = parser.parse_args(argv)
	if len(args) < MIN_ARGS + 1:
		# not enough arguments
		print """ERROR: not enough arguments.
Try `%s --help' for more information""" % args[0].split(sep)[-1]
		exit(1)

	pp(args[1], opt.v)

